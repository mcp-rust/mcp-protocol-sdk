name: Release

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Pre-release Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-test-${{ matrix.os }}"
          cache-on-failure: true

      - name: Run tests
        run: cargo test --all-features --release

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release v${{ steps.version.outputs.version }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}

  publish:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: [test, release]
    if: github.repository == 'mcp-rust/mcp-protocol-sdk'
    environment: release
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install OpenSSL
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "publish"
          cache-on-failure: true

      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [test, release]
    permissions:
      contents: read
      pages: write
      id-token: write
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install OpenSSL
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-docs"
          cache-on-failure: true

      - name: Build documentation
        run: |
          cargo doc --all-features --no-deps --document-private-items
          echo '<meta http-equiv="refresh" content="0; url=mcp_protocol_sdk">' > target/doc/index.html
        env:
          RUSTDOCFLAGS: "--cfg docsrs"

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./target/doc

      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
